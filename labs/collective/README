################################################################################
#  Collective Pattern
################################################################################

As you learned in lecture, the collective pattern is one in which an operation is performed to reduce a collection of elements in parallel

################################################################################
#  Problem Statement
################################################################################

OSNAP has and handles a large amount of sensitive data. Some of the data is classified such that only specific sets of people should be able to access and the data should only be accessed when all of them are present (eg. alien autopsy footage). 

Our security consultants have devised an XOR based encryption strategy to support the requirements and have provided a serial reference implementation. XOR is associative and commutative, so there may be an opportunity to improve performance with a parallel collective. OSNAP needs parallel implementations to conduct performance studies with.

################################################################################
#  What to do
################################################################################

1. Update your repository
git pull origin

2. Run the Makefile and look at the source code and output of each of the program.

3. Run the serial program with the command ./crypto_serial US.dic keys/*  You 
can use the superSecretText file for test input instead of US.dic, but it 
is very small.

4. Write a parallel version of the program in Cilk, TBB, and OpenMP.
Follow the convention of <app>_openmp, <app>_cilk, <app>_tbb for source and
executable files. I will rely on this for my own grading purposes.

5. Update the Makefile entries for the other three build targets with compilation commands for source files.


6. Get timing results for all implementations using the US.dic file as 
input. This should include the serial program, and your parallel versions with 
the number of threads set to 32.  Furthermore, plot speedup for your openmp 
version as you set OMP_NUM_THREADS to the values [1,4,16,32,64] (use more values
if you feel like it).  Include your results in a PDF file called results.pdf 
and include a description of the contributions from each group member.

7. Commit and push the source files, updated Makefile, and results.pdf to your group repository.  Please do not add the executable files to the repository.

