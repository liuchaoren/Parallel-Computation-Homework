################################################################################
#  Fork/Join Pattern
################################################################################

The Fork/Join pattern is a flexible pattern for expressing parallelism. Where there is more work to be done, fork off a thread or task to do it in parallel. When the task is done, the result can be joined into a result.

################################################################################
#  Problem Statement
################################################################################

OSNAP is investigating faster than light travel using a ring shaped device and exotic particles. You have been provided a serial simulation implementation that we would like to have accelerated.

The "Carter particles" are injected into a field and move randomly (weighted based on their location in the field). The Carter particles will spontaneously divide within the field; the probability is also given by a distribution related to distance.

Care has been taken in the code so that the random number generation is deterministic (ie. Given the same input parameters all versions should generate exactly the same output). Your optimized versions should maintain this property.

################################################################################
#  What to do
################################################################################

1. Check out the repository

git pull origin

2. Run the Makefile and look at the source code and output of the program.
I've provided all the entries in the Makefile, so don't worry when make fails
to compile the programs you have not yet written.  

3. Use run.sh script to run the starhole_serial program.  There are several command line arguments, I'm not list them all here. The program produces a file out.jpg that you can examine if you wish.

4. Write a your new versions of the program.  Follow the convention of 
starhole_openmp, starhole_cilk, starhole_tbb
for source and executable files. I will rely on this for my own 
grading purposes. 

6. Get timing results for all implementations.  This should include the 
serial program, and your parallel versions.  Plot speedup for one of your three parallel.

7. Include your results in a PDF file called results.pdf. This file should
describe what steps you took to parallelize the serial code.
Also include a description of the contributions from each group member in the PDF.

8. Commit and push the source files, updated Makefile, and results.pdf to your group repository.  Please do not add the executable files to the repository.
